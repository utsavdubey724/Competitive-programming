/*
Problem:    890. Find and Replace Pattern
Date:       August 19, 2021
Author:     Utsav Dubey, utsav_201700433@smit.smu.edu.in
Difficulty: Medium
Source:     https://leetcode.com/problems/find-and-replace-pattern/


Question:
Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.


Example 1:
Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

Example 2:
Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
 

Constraints:
1 <= pattern.length <= 20
1 <= words.length <= 50
words[i].length == pattern.length
pattern and words[i] are lowercase English letters.
*/


class Solution {
public:
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
        
        int n = words.size(),pn = pattern.size();
        vector<string> res;
        string currentWord;
        int flag;
        for(int i=0;i<n;i++){
            unordered_map<char,char> myMap;
            currentWord = words[i];
            flag = 1;
            if(currentWord.size() == pn){
                for(int j=0;j<pn;j++){
                    if(myMap[pattern[j]] && myMap[pattern[j]] != currentWord[j]){
                        flag = 0;
                        break;
                    }
                    myMap[pattern[j]] = currentWord[j];
                }
                
                unordered_set<char> mySet;          //To check one-to-one relationship, otherwise in word="ccc"
                for(auto it : myMap){               // and pattern "abb", 'a' and 'b' both are mapped to 'c'
                    mySet.insert(it.second);
                }
                if(mySet.size() != myMap.size())
                    flag = 0;
                
                if(flag)                            //Conditions satisfied
                    res.emplace_back(currentWord);
            }
        }
        
        return res;
    }
    
    /*vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
        
        int n = words.size(),pn = pattern.size();
        vector<string> res;
        string currentWord;
        int flag;
        for(int i=0;i<n;i++){
            unordered_map<char,char> myMap;
            currentWord = words[i];
            flag = 1;
            if(currentWord.size() == pn){
                for(int j=0;j<pn;j++){
                    myMap[pattern[j]] = currentWord[j];
                }
                for(int j=0;j<pn;j++){
                    if(myMap[pattern[j]] != currentWord[j]){
                        flag = 0;
                        break;
                    }        
                }
                
                unordered_set<char> mySet;          //To check one-to-one relationship, otherwise in word="ccc"
                for(auto it : myMap){               // and pattern "abb", 'a' and 'b' both are mapped to 'c' 
                    mySet.insert(it.second);
                }
                if(mySet.size() != myMap.size())
                    flag = 0;
                
                if(flag)                            //Conditions satisfied
                    res.emplace_back(currentWord);
            }
        }
        
        return res;
    }*/
};
